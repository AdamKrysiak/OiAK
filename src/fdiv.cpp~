#include "flib.h"
#include <iostream>
#include <bitset>
#include <iso646.h>

int fdiv(float a, float b)	{

	// transfer float representation to an int
	unsigned int _a = *reinterpret_cast<int*>(&a);
	unsigned int _b = *reinterpret_cast<int*>(&b);

	// mantissa + hidden bit
	unsigned int man_a = (_a & 0b00000000011111111111111111111111) + 0b00000000100000000000000000000000;
	unsigned int man_b = (_b & 0b00000000011111111111111111111111) + 0b00000000100000000000000000000000;
	// exponent
	unsigned int exp_a = (_a & 0b01111111100000000000000000000000) >> 23;
	unsigned int exp_b = (_b & 0b01111111100000000000000000000000) >> 23;
	// sign
	unsigned int sign_a = _a & 0b10000000000000000000000000000000;
	unsigned int sign_b = _b & 0b10000000000000000000000000000000;
	
	// result
	unsigned int result = 0;
	
	// adding exponents
	unsigned int exp_c = exp_a + exp_b - 127;
	
	// signs xor
	unsigned int sign_c = sign_a ^ sign_b;
	
	// multiply mantissas
	unsigned long long man_c = ( (long long)(man_a) << 23 ) * (long long)(man_b);
	// check if result is denormalized
	// shift through 46 bits(place of the point)
	if((man_c>>46) > 1)	
	{
		// if it's denormalized
		unsigned long long man_copy = man_c>>46;
	
		// add 1 to exponent
		exp_c += 1;
		// check if exponent is ok
		if (exp_c > 255 || exp_c < 0)	{
			// bad result, throw exception
		}
		// shift exponent to the right place
		exp_c = exp_c << 23;
		
		// shift result to the right
		// add +1 as we normalize
		man_c = ( man_c >> (23 + 1) );
		// subtract the hidden bit
		man_c = man_c ^ 0b00000000100000000000000000000000;
	}
	else	{
		//if it's normalized then just shift right
		man_c = man_c >> 23;
		// shift exponent to the right place
		exp_c = exp_c << 23;
		// subtract the hidden bit
		man_c = man_c ^ 0b00000000100000000000000000000000;
	}
	
	// put the result together
	result = result | *reinterpret_cast<int*>(&man_c);
	result = result | sign_c;
	result = result | exp_c;
	
	std::cout<<"mantissa       "<<std::bitset<32>(0b01111111100000000000000000000000)<<std::endl;
	std::cout<<"exponent       "<<std::bitset<32>(0b00000000011111111111111111111111)<<std::endl;
	std::cout<<"_a:            "<<std::bitset<32>(_a)<<std::endl;
	std::cout<<"_b:            "<<std::bitset<32>(_b)<<std::endl;
	std::cout<<"man_a:         "<<std::bitset<32>(man_a)<<std::endl;
	std::cout<<"man_b:         "<<std::bitset<32>(man_b)<<std::endl;
	std::cout<<"result:        "<<std::bitset<32>(result)<<std::endl;
	
	std::cout<<"resultFloat:   "<<*reinterpret_cast<float*>(&result)<<std::endl;
	std::cout<<"floatFPU:      "<<a*b<<std::endl;
	return result;
}
